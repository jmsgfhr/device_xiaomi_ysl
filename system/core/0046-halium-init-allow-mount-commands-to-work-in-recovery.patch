From 23bb93db7bdbff4cffe9759e4f76cbdf7c0d0f59 Mon Sep 17 00:00:00 2001
From: TheKit <nekit1000@gmail.com>
Date: Sun, 8 Nov 2020 20:12:24 +0200
Subject: [PATCH] (halium) init: allow mount commands to work in recovery

This workarounds 0026-hybris-avoid-attempting-to-mount-partitions-mer-syst.patch
and 0031-hybris-ignore-mount-and-mkdir-tmp-commands-entirely.patch imported
from SailfishOS and fixes USB configfs initialization in recovery.

Change-Id: I60cd3f23569a9f92b8cba18ad5b652f0a652c38b
---
 init/builtins.cpp | 30 ++++++++++++++++--------------
 1 file changed, 16 insertions(+), 14 deletions(-)

diff --git a/init/builtins.cpp b/init/builtins.cpp
index 707ab22..aad9df4 100644
--- a/init/builtins.cpp
+++ b/init/builtins.cpp
@@ -98,6 +98,11 @@ static void ForEachServiceInClass(const std::string& classname, F function) {
     }
 }
 
+// Copied from init_first_stage.cpp
+static bool inline IsRecoveryMode() {
+    return access("/sbin/recovery", F_OK) == 0;
+}
+
 static Result<Success> do_class_start(const BuiltinArguments& args) {
     // Starting a class does not start services which are explicitly disabled.
     // They must  be started individually.
@@ -244,7 +249,7 @@ static Result<Success> do_insmod(const BuiltinArguments& args) {
 static Result<Success> do_mkdir(const BuiltinArguments& args) {
     mode_t mode = 0755;
 
-    if (args[1] == "/tmp") {
+    if (!IsRecoveryMode() && args[1] == "/tmp") {
         // hybris, do not recreate or change permissions on tmp (consider
         // this for other systemd owned directories as well?)
         return Success();
@@ -302,13 +307,13 @@ static Result<Success> do_mkdir(const BuiltinArguments& args) {
 
 /* umount <path> */
 static Result<Success> do_umount(const BuiltinArguments& args) {
-    return Success();
-#if DISABLED_FOR_HYBRIS_SUPPORT
+    // umount command is disabled inside Halium container
+    if (!IsRecoveryMode())
+        return Success();
     if (umount(args[1].c_str()) < 0) {
         return ErrnoError() << "umount() failed";
     }
     return Success();
-#endif
 }
 
 static struct {
@@ -339,9 +344,9 @@ static struct {
 static Result<Success> do_mount(const BuiltinArguments& args) {
     (void)args;
     (void)mount_flags;
-
-    return Success();
-#if DISABLED_FOR_HYBRIS_SUPPORT
+    // mount command is disabled inside Halium container
+    if (!IsRecoveryMode())
+        return Success();
     const char* options = nullptr;
     unsigned flags = 0;
     bool wait = false;
@@ -404,7 +409,6 @@ static Result<Success> do_mount(const BuiltinArguments& args) {
     }
 
     return Success();
-#endif
 }
 
 /* Imports .rc files from the specified paths. Default ones are applied if none is given.
@@ -432,7 +436,6 @@ static void import_late(const std::vector<std::string>& args, size_t start_index
     if (false) DumpState();
 }
 
-#if 0
 /* mount_fstab
  *
  *  Call fs_mgr_mount_all() to mount the given fstab
@@ -477,7 +480,6 @@ static Result<int> mount_fstab(const char* fstabfile, int mount_mode) {
         return Error() << "fork() failed";
     }
 }
-#endif
 
 /* Queue event based on fs_mgr return code.
  *
@@ -562,7 +564,7 @@ static Result<Success> do_mount_all(const BuiltinArguments& args) {
     bool import_rc = true;
     bool queue_event = true;
     int mount_mode = MOUNT_MODE_DEFAULT;
-    //const char* fstabfile = args[1].c_str();
+    const char* fstabfile = args[1].c_str();
     std::size_t path_arg_end = args.size();
     const char* prop_post_fix = "default";
 
@@ -583,12 +585,12 @@ static Result<Success> do_mount_all(const BuiltinArguments& args) {
     std::string prop_name = "ro.boottime.init.mount_all."s + prop_post_fix;
     android::base::Timer t;
 
-/*
-    auto mount_fstab_return_code = mount_fstab(fstabfile, mount_mode);
+    // Skip mount_fstab inside Halium container but allow in recovery
+    auto mount_fstab_return_code = IsRecoveryMode() ? mount_fstab(fstabfile, mount_mode) : 1;
     if (!mount_fstab_return_code) {
         return Error() << "mount_fstab() failed " << mount_fstab_return_code.error();
     }
-*/
+
     property_set(prop_name, std::to_string(t.duration().count()));
 
     if (import_rc) {
-- 
2.28.0

